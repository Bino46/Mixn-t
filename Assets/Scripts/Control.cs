//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Control: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Control"",
    ""maps"": [
        {
            ""name"": ""Action"",
            ""id"": ""5557ce29-3ab6-453f-8e6d-aec3b613ae41"",
            ""actions"": [
                {
                    ""name"": ""MoveCam"",
                    ""type"": ""Value"",
                    ""id"": ""fa1df1b9-f065-4705-a367-dc48efc112d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ClicRay"",
                    ""type"": ""Button"",
                    ""id"": ""428ed940-9dc0-4e1c-9d96-915becbfef70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickPos"",
                    ""type"": ""Value"",
                    ""id"": ""1dc5603e-9b2b-46e4-906a-da670a8f1c1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b72a06a-b007-4fa6-aa69-3349577d7ebe"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd518cf0-29b4-42ac-98e3-c2ab74e579b9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClicRay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84345c65-00c8-46e7-afde-b4798dd8e971"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Action
        m_Action = asset.FindActionMap("Action", throwIfNotFound: true);
        m_Action_MoveCam = m_Action.FindAction("MoveCam", throwIfNotFound: true);
        m_Action_ClicRay = m_Action.FindAction("ClicRay", throwIfNotFound: true);
        m_Action_ClickPos = m_Action.FindAction("ClickPos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Action
    private readonly InputActionMap m_Action;
    private List<IActionActions> m_ActionActionsCallbackInterfaces = new List<IActionActions>();
    private readonly InputAction m_Action_MoveCam;
    private readonly InputAction m_Action_ClicRay;
    private readonly InputAction m_Action_ClickPos;
    public struct ActionActions
    {
        private @Control m_Wrapper;
        public ActionActions(@Control wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCam => m_Wrapper.m_Action_MoveCam;
        public InputAction @ClicRay => m_Wrapper.m_Action_ClicRay;
        public InputAction @ClickPos => m_Wrapper.m_Action_ClickPos;
        public InputActionMap Get() { return m_Wrapper.m_Action; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionActions set) { return set.Get(); }
        public void AddCallbacks(IActionActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionActionsCallbackInterfaces.Add(instance);
            @MoveCam.started += instance.OnMoveCam;
            @MoveCam.performed += instance.OnMoveCam;
            @MoveCam.canceled += instance.OnMoveCam;
            @ClicRay.started += instance.OnClicRay;
            @ClicRay.performed += instance.OnClicRay;
            @ClicRay.canceled += instance.OnClicRay;
            @ClickPos.started += instance.OnClickPos;
            @ClickPos.performed += instance.OnClickPos;
            @ClickPos.canceled += instance.OnClickPos;
        }

        private void UnregisterCallbacks(IActionActions instance)
        {
            @MoveCam.started -= instance.OnMoveCam;
            @MoveCam.performed -= instance.OnMoveCam;
            @MoveCam.canceled -= instance.OnMoveCam;
            @ClicRay.started -= instance.OnClicRay;
            @ClicRay.performed -= instance.OnClicRay;
            @ClicRay.canceled -= instance.OnClicRay;
            @ClickPos.started -= instance.OnClickPos;
            @ClickPos.performed -= instance.OnClickPos;
            @ClickPos.canceled -= instance.OnClickPos;
        }

        public void RemoveCallbacks(IActionActions instance)
        {
            if (m_Wrapper.m_ActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionActions @Action => new ActionActions(this);
    public interface IActionActions
    {
        void OnMoveCam(InputAction.CallbackContext context);
        void OnClicRay(InputAction.CallbackContext context);
        void OnClickPos(InputAction.CallbackContext context);
    }
}
